name: Microservices CI/CD ‚Üí Docker Hub + EC2 (with existing docker-compose.yml)

on:
  push:
    branches: [ main ]
  workflow_dispatch:

env:
  DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
  AWS_REGION: "ap-southeast-1"

jobs:
  build-and-deploy:
    name: üê≥ Build, Push & Deploy via Docker Compose
    runs-on: ubuntu-latest
    steps:
      - name: üì• Checkout Code
        uses: actions/checkout@v4

      - name: ‚öôÔ∏è Configure AWS Credentials (for CodeArtifact)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: üîë Generate CodeArtifact Maven Settings
        run: |
          TOKEN=$(aws codeartifact get-authorization-token \
            --domain magic-bag --domain-owner 838811708767 --region ${{ env.AWS_REGION }} \
            --query authorizationToken --output text)
          mkdir -p .m2
          cat > .m2/settings.xml << EOF
          <settings>
            <servers>
              <server>
                <id>codeartifact</id>
                <username>aws</username>
                <password>${TOKEN}</password>
              </server>
            </servers>
            <profiles>
              <profile>
                <id>default</id>
                <repositories>
                  <repository>
                    <id>codeartifact</id>
                    <url>https://magic-bag-838811708767.d.codeartifact.ap-southeast-1.amazonaws.com/maven/magic_bag/</url>
                  </repository>
                </repositories>
              </profile>
            </profiles>
            <activeProfiles>
              <activeProfile>default</activeProfile>
            </activeProfiles>
          </settings>
          EOF

      - name: ‚öôÔ∏è Setup JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
          cache: 'maven'
          server-id: codeartifact
          settings-path: .m2/settings.xml

      - name: üß™ Build & Push Docker Images
        run: |
          SERVICES=(
            "magic-bag-gateway:10016:magic-bag-gateway"
            "magic-bag-auth:10017:magic-bag-auth"
            "magic-bag-user:10018:magic-bag-user"
            "magic-bag-product:10019:magic-bag-product"
            "magic-bag-order:10020:magic-bag-order"
            "magic-bag-payment:10021:magic-bag-payment"
            "magic-bag-cart:10022:magic-bag-cart"
            "magic-bag-merchant:10023:magic-bag-merchant"
            "magic-bag-admin:10024:magic-bag-admin"
          )

          for svc in "${SERVICES[@]}"; do
            IFS=':' read -r NAME PORT DIR <<< "$svc"
            echo "üì¶ Building $NAME..."
            mvn -B -pl "$DIR" test -s .m2/settings.xml
            docker build -f "$DIR/Dockerfile" \
              --build-arg SERVICE_NAME="$DIR" \
              --build-arg APP_PORT="$PORT" \
              --build-arg TZ=Asia/Singapore \
              -t ${{ secrets.DOCKERHUB_USERNAME }}/"$NAME":latest .
            docker push ${{ secrets.DOCKERHUB_USERNAME }}/"$NAME":latest
          done

      - name: üîê Docker Login (for Compose pull)
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: üöÄ Deploy to EC2 via SSH
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            # ËøõÂÖ• docker-compose ÊâÄÂú®ÁõÆÂΩïÔºà‰Ω†Â∑≤ÊîæÂ•ΩÁöÑ‰ΩçÁΩÆÔºâ
            cd /home/ubuntu

            # ÁôªÂΩï Docker HubÔºà‰ΩøÁî® tokenÔºâ
            echo "${{ secrets.DOCKERHUB_TOKEN }}" | docker login -u ${{ secrets.DOCKERHUB_USERNAME }} --password-stdin

            # ÂÖ≥ÈîÆÔºöÂÖà down ÂÜç upÔºåÈÅøÂÖçÂÆπÂô®ÂêçÂÜ≤Á™Å
            docker-compose down

            # ÊãâÂèñÊúÄÊñ∞ÈïúÂÉèÔºàÂØπÂ∫î docker-compose.yml ‰∏≠ÁöÑ image:xxxÔºâ
            docker-compose pull

            # ÂêéÂè∞ÂêØÂä®ÊâÄÊúâÊúçÂä°
            docker-compose up -d

            # ÂèØÈÄâÔºöÊ∏ÖÁêÜÊó†Áî®ÈïúÂÉè
            docker image prune -f

            # Êü•ÁúãËøêË°åÁä∂ÊÄÅ
            docker-compose ps