name: MagicBag CI/CD ‚Üí Smart Build + SonarQube + Docker + EC2 + ZAP DAST

on:
  push:
    branches: [ main ]
  workflow_dispatch:

env:
  DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
  AWS_REGION: ap-southeast-1
  MAVEN_OPTS: "-Dmaven.repo.local=/tmp/m2-cache"
  TARGET_URL: http://${{ secrets.EC2_HOST }}:10016  # Gateway ÂÖ•Âè£

jobs:
  detect-changes:
    name: üîç Detect Changed Microservices
    runs-on: ubuntu-latest
    outputs:
      changed_modules: ${{ steps.set_output.outputs.changed_modules }}
      has_changes: ${{ steps.set_output.outputs.has_changes }}
    steps:
      - name: üì• Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 2  # ÈúÄË¶Å HEAD~1

      - name: üìÇ Identify Changed Modules (with pom.xml)
        id: set_output
        run: |
          CHANGED_MODULES=()
          CHANGED_FILES=$(git diff --name-only HEAD~1 HEAD)

          # Ê£ÄÊü•ÊòØÂê¶Êúâ pom.xml ÂèòÊõ¥
          while IFS= read -r file; do
            if [[ "$file" == *"pom.xml" ]]; then
              DIR=$(dirname "$file")
              if [ "$DIR" != "." ]; then
                CHANGED_MODULES+=("$DIR")
              fi
            fi
          done <<< "$CHANGED_FILES"

          # ÂéªÈáç
          UNIQUE_MODULES=($(printf "%s\n" "${CHANGED_MODULES[@]}" | sort -u))
          
          if [ ${#UNIQUE_MODULES[@]} -eq 0 ]; then
            echo "No module changes detected."
            echo "changed_modules=none" >> $GITHUB_OUTPUT
            echo "has_changes=false" >> $GITHUB_OUTPUT
          else
            MODULE_LIST=$(IFS=','; echo "${UNIQUE_MODULES[*]}")
            echo "Changed modules: $MODULE_LIST"
            echo "changed_modules=$MODULE_LIST" >> $GITHUB_OUTPUT
            echo "has_changes=true" >> $GITHUB_OUTPUT
          fi

  build-and-scan:
    name: üß™ Build Changed & SonarQube Scan
    runs-on: ubuntu-latest
    needs: detect-changes
    if: ${{ needs.detect-changes.outputs.has_changes == 'true' }}
    steps:
      - name: üì• Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: ‚è±Ô∏è Cache Maven packages
        uses: actions/cache@v3
        with:
          path: /tmp/m2-cache
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-m2-

      - name: ‚öôÔ∏è Setup JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
          cache: 'maven'

      - name: ‚öôÔ∏è Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: üîë Generate CodeArtifact settings.xml
        run: |
          TOKEN=$(aws codeartifact get-authorization-token \
            --domain magic-bag \
            --domain-owner 838811708767 \
            --region ${{ env.AWS_REGION }} \
            --query authorizationToken --output text)
          REPO_URL="https://magic-bag-838811708767.d.codeartifact.${{ env.AWS_REGION }}.amazonaws.com/maven/magic_bag/"
          mkdir -p /tmp/m2-cache
          cat > /tmp/m2-cache/settings.xml << EOF
          <settings>
            <servers>
              <server>
                <id>codeartifact</id>
                <username>aws</username>
                <password>${TOKEN}</password>
              </server>
            </servers>
            <profiles>
              <profile>
                <id>codeartifact</id>
                <repositories>
                  <repository>
                    <id>codeartifact</id>
                    <url>${REPO_URL}</url>
                    <releases><enabled>true</enabled></releases>
                    <snapshots><enabled>true</enabled></snapshots>
                  </repository>
                </repositories>
                <pluginRepositories>
                  <pluginRepository>
                    <id>codeartifact</id>
                    <url>${REPO_URL}</url>
                    <releases><enabled>true</enabled></releases>
                    <snapshots><enabled>true</enabled></snapshots>
                  </pluginRepository>
                </pluginRepositories>
              </profile>
            </profiles>
            <activeProfiles>
              <activeProfile>codeartifact</activeProfile>
            </activeProfiles>
          </settings>
          EOF

      - name: üß™ Build Only Changed Microservices
        run: |
          IFS=',' read -ra MODULES <<< "${{ needs.detect-changes.outputs.changed_modules }}"
          for MODULE in "${MODULES[@]}"; do
            if [ ! -f "$MODULE/pom.xml" ]; then
              echo "‚ö†Ô∏è Skip $MODULE: no pom.xml"
              continue
            fi
            echo "üì¶ Building $MODULE..."
            mvn -B -pl "$MODULE" clean compile test \
              -s /tmp/m2-cache/settings.xml \
              -Dmaven.repo.local=/tmp/m2-cache
          done

      - name: üìä SonarQube Scan (Changed Modules Only)
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
        run: |
          IFS=',' read -ra MODULES <<< "${{ needs.detect-changes.outputs.changed_modules }}"
          for MODULE in "${MODULES[@]}"; do
            if [ -f "$MODULE/pom.xml" ]; then
              echo "üîç Scanning $MODULE with SonarQube..."
              mvn -B -pl "$MODULE" sonar:sonar \
                -s /tmp/m2-cache/settings.xml \
                -Dmaven.repo.local=/tmp/m2-cache \
                -Dsonar.login="$SONAR_TOKEN" \
                -Dsonar.host.url="$SONAR_HOST_URL" \
                -Dsonar.projectKey=magicbag-$MODULE \
                -Dsonar.sources=. \
                -Dsonar.java.binaries=target
            fi
          done

      - name: üì§ Upload Built JARs (Only Changed)
        uses: actions/upload-artifact@v4
        with:
          name: built-jars
          path: |
            ${{ needs.detect-changes.outputs.changed_modules }}/target/*.jar

  build-and-deploy:
    name: üê≥ Build Docker & Deploy to EC2
    runs-on: ubuntu-latest
    needs: [detect-changes, build-and-scan]
    if: ${{ needs.detect-changes.outputs.has_changes == 'true' }}
    steps:
      - name: üì• Checkout Code
        uses: actions/checkout@v4

      - name: üì• Download Built JARs
        uses: actions/download-artifact@v4
        with:
          name: built-jars
          path: .

      - name: üîÅ Restore JARs to target Directories
        run: |
          IFS=',' read -ra MODULES <<< "${{ needs.detect-changes.outputs.changed_modules }}"
          for MODULE in "${MODULES[@]}"; do
            mkdir -p "$MODULE/target"
            JAR=$(find . -name "${MODULE}-*.jar" | head -n1)
            if [ -n "$JAR" ]; then
              cp "$JAR" "$MODULE/target/app.jar"
              echo "‚úÖ Copied $JAR to $MODULE/target/app.jar"
            else
              echo "‚ùå JAR not found for $MODULE"
              exit 1
            fi
          done

      - name: üê≥ Build Docker Images (Only Changed)
        run: |
          IFS=',' read -ra MODULES <<< "${{ needs.detect-changes.outputs.changed_modules }}"
          for MODULE in "${MODULES[@]}"; do
            if [ -f "$MODULE/Dockerfile" ]; then
              # ‰ªéÊ®°ÂùóÂêçÊé®Êñ≠Á´ØÂè£ÔºàÂ¶Ç magic-bag-user ‚Üí 10018Ôºâ
              BASE_NAME=$(echo "$MODULE" | cut -d'-' -f3-)
              case "$BASE_NAME" in
                "gateway") PORT=10016 ;;
                "auth") PORT=10017 ;;
                "user") PORT=10018 ;;
                "product") PORT=10019 ;;
                "order") PORT=10020 ;;
                "payment") PORT=10021 ;;
                "cart") PORT=10022 ;;
                "merchant") PORT=10023 ;;
                "admin") PORT=10024 ;;
                *) PORT=8080 ;;
              esac
              echo "üê≥ Building $MODULE on port $PORT..."
              docker build -f "$MODULE/Dockerfile" \
                --build-arg SERVICE_NAME="$MODULE" \
                --build-arg APP_PORT="$PORT" \
                --build-arg TZ=Asia/Singapore \
                -t ${{ secrets.DOCKERHUB_USERNAME }}/"$MODULE":latest .
            fi
          done

      - name: üîê Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: üöÄ Push Changed Images to Docker Hub
        run: |
          IFS=',' read -ra MODULES <<< "${{ needs.detect-changes.outputs.changed_modules }}"
          for MODULE in "${MODULES[@]}"; do
            docker push ${{ secrets.DOCKERHUB_USERNAME }}/"$MODULE":latest
          done

      - name: üåê Deploy to EC2 via SSH
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            cd /home/ubuntu
            echo "${{ secrets.DOCKERHUB_TOKEN }}" | docker login -u ${{ secrets.DOCKERHUB_USERNAME }} --password-stdin
            docker compose down
            docker compose pull
            docker compose up -d
            docker image prune -f

  dast-scan:
    name: üõ°Ô∏è ZAP DAST Security Scan
    runs-on: ubuntu-latest
    needs: build-and-deploy
    if: ${{ needs.detect-changes.outputs.has_changes == 'true' }}
    steps:
      - name: ‚è≥ Wait for Service to Be Ready
        run: |
          echo "‚è≥ Waiting 30s for services to start..."
          sleep 30
          echo "üì° Testing connectivity to ${{ env.TARGET_URL }}"
          curl -f --retry 5 --retry-delay 5 --max-time 10 ${{ env.TARGET_URL }}/actuator/health || exit 1

      - name: üïµÔ∏è Run ZAP Baseline Scan
        run: |
          mkdir -p zap-report
          docker run -v $PWD/zap-report:/zap/wrk:rw \
            --rm \
            owasp/zap2docker-stable \
            zap-baseline.py \
            -t ${{ env.TARGET_URL }} \
            -r zap-report.html

      - name: üì§ Upload ZAP Report
        uses: actions/upload-artifact@v4
        with:
          name: zap-dast-report
          path: zap-report/zap-report.html

      - name: ‚ùå Fail on High/Critical Alerts (Optional)
        run: |
          if grep -q "High.*>" zap-report/zap-report.html || grep -q "Critical.*>" zap-report/zap-report.html; then
            echo "üí• ZAP found High/Critical vulnerabilities!"
            exit 1
          else
            echo "‚úÖ No High/Critical issues found."
          fi