name: MagicBag CI/CD → Docker Hub + EC2

on:
  push:
    branches: [ main ]
  workflow_dispatch:

env:
  DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
  AWS_REGION: ap-southeast-1
  EC2_DEPLOY_PATH: /home/ubuntu/app

jobs:
  build-and-deploy:
    name: 🐳 Build, Push & Deploy Microservices
    runs-on: ubuntu-latest
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: ⚙️ Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: ⚙️ Setup JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
          cache: 'maven'

      - name: 🔑 Generate CodeArtifact settings.xml
        run: |
          echo "🔧 Fetching CodeArtifact token..."
          TOKEN=$(aws codeartifact get-authorization-token \
            --domain magic-bag \
            --domain-owner 838811708767 \
            --region ${{ env.AWS_REGION }} \
            --query authorizationToken --output text)

          echo "📝 Writing ~/.m2/settings.xml..."
          mkdir -p .m2
          cat > .m2/settings.xml << EOF
          <settings>
            <servers>
              <server>
                <id>codeartifact</id>
                <username>aws</username>
                <password>${TOKEN}</password>
              </server>
            </servers>
            <profiles>
              <profile>
                <id>default</id>
                <repositories>
                  <repository>
                    <id>codeartifact</id>
                    <url>https://magic-bag-838811708767.d.codeartifact.${{ env.AWS_REGION }}.amazonaws.com/maven/magic_bag/</url>
                  </repository>
                </repositories>
              </profile>
            </profiles>
            <activeProfiles>
              <activeProfile>default</activeProfile>
            </activeProfiles>
          </settings>
          EOF

      - name: 🧪 Build All Microservices & Create Docker Images
        run: |
          SERVICES=(
            "magic-bag-gateway:10016"
            "magic-bag-auth:10017"
            "magic-bag-user:10018"
            "magic-bag-product:10019"
            "magic-bag-order:10020"
            "magic-bag-payment:10021"
            "magic-bag-cart:10022"
            "magic-bag-merchant:10023"
            "magic-bag-admin:10024"
          )

          for svc in "${SERVICES[@]}"; do
            IFS=':' read -r DIR PORT <<< "$svc"
            if [ ! -f "$DIR/pom.xml" ]; then
              echo "⚠️ Skip $DIR: pom.xml not found"
              continue
            fi

            echo "📦 Building $DIR..."
            mvn -B -pl "$DIR" test -s ~/.m2/settings.xml

            echo "🐳 Building Docker image for $DIR..."
            docker build -f "$DIR/Dockerfile" \
              --build-arg SERVICE_NAME="$DIR" \
              --build-arg APP_PORT="$PORT" \
              --build-arg TZ=Asia/Singapore \
              -t ${{ secrets.DOCKERHUB_USERNAME }}/"$DIR":latest .
          done

      - name: 🔐 Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: 🚀 Push All Images to Docker Hub
        run: |
          SERVICES=(
            magic-bag-gateway
            magic-bag-auth
            magic-bag-user
            magic-bag-product
            magic-bag-order
            magic-bag-payment
            magic-bag-cart
            magic-bag-merchant
            magic-bag-admin
          )
          for svc in "${SERVICES[@]}"; do
            echo "📤 Pushing $svc..."
            docker push ${{ secrets.DOCKERHUB_USERNAME }}/"$svc":latest
          done

      - name: 🌐 Deploy to EC2 via SSH
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            cd /home/ubuntu

            # 登录 Docker Hub
            echo "${{ secrets.DOCKERHUB_TOKEN }}" | docker login -u ${{ secrets.DOCKERHUB_USERNAME }} --password-stdin

            # 停止并清理旧容器（避免 container_name 冲突）
            echo "🛑 Stopping old services..."
            docker compose down

            # 拉取最新镜像
            echo "📥 Pulling latest images..."
            docker compose pull

            # 启动新服务
            echo "🟢 Starting services..."
            docker compose up -d

            # 清理无用镜像
            docker image prune -f

            # 显示运行状态
            echo "📊 Current status:"
            docker compose ps