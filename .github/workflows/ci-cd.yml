name: Microservices CI/CD ‚Üí Docker Hub + EC2 (Compose)

on:
  push:
    branches: [ main ]
  workflow_dispatch:

env:
  DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
  AWS_REGION: "ap-southeast-1"

jobs:
  build-and-push:
    name: üê≥ Build & Push All Images
    runs-on: ubuntu-latest
    steps:
      - name: üì• Checkout
        uses: actions/checkout@v4

      - name: ‚öôÔ∏è Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: üîë Generate CodeArtifact settings.xml
        run: |
          TOKEN=$(aws codeartifact get-authorization-token \
            --domain magic-bag --domain-owner 838811708767 --region ${{ env.AWS_REGION }} \
            --query authorizationToken --output text)
          mkdir -p .m2
          cat > .m2/settings.xml << EOF
          <settings>
            <servers><server><id>codeartifact</id><username>aws</username><password>${TOKEN}</password></server></servers>
            <profiles><profile><id>default</id><repositories><repository><id>codeartifact</id><url>https://magic-bag-838811708767.d.codeartifact.ap-southeast-1.amazonaws.com/maven/magic_bag/</url></repository></repositories></profile></profiles>
            <activeProfiles><activeProfile>default</activeProfile></activeProfiles>
          </settings>
          EOF

      - name: ‚öôÔ∏è Setup JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
          cache: 'maven'

      - name: üß™ Test & Build All Services
        run: |
          SERVICES=(
            "magic-bag-gateway:10016:magic-bag-gateway"
            "magic-bag-auth:10017:magic-bag-auth"
            "magic-bag-user:10018:magic-bag-user"
            "magic-bag-product:10019:magic-bag-product"
            "magic-bag-order:10020:magic-bag-order"
            "magic-bag-payment:10021:magic-bag-payment"
            "magic-bag-cart:10022:magic-bag-cart"
            "magic-bag-merchant:10023:magic-bag-merchant"
            "magic-bag-admin:10024:magic-bag-admin"
          )

          for svc in "${SERVICES[@]}"; do
            IFS=':' read -r NAME PORT DIR <<< "$svc"
            mvn -B -pl "$DIR" test -s .m2/settings.xml
            docker build -f "$DIR/Dockerfile" \
              --build-arg SERVICE_NAME="$DIR" \
              --build-arg APP_PORT="$PORT" \
              --build-arg TZ=Asia/Singapore \
              -t ${{ secrets.DOCKERHUB_USERNAME }}/"$NAME":latest .
            docker push ${{ secrets.DOCKERHUB_USERNAME }}/"$NAME":latest
          done

      - name: üì§ Deploy via Docker Compose on EC2
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            mkdir -p /home/ubuntu/app
            cd /home/ubuntu/app

            # ‰ªé GitHub ‰∏ãËΩΩ docker-compose.ymlÔºàÁ°Æ‰øù‰ΩøÁî® image ËÄåÈùû buildÔºâ
            curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
              "https://raw.githubusercontent.com/${{ github.repository }}/main/docker-compose.yml" \
              -o docker-compose.yml

            # ÁôªÂΩï Docker Hub
            echo "${{ secrets.DOCKERHUB_TOKEN }}" | docker login -u ${{ secrets.DOCKERHUB_USERNAME }} --password-stdin

            # ÊãâÂèñÊñ∞ÈïúÂÉèÂπ∂ÈáçÂêØÊúçÂä°
            docker-compose pull
            docker-compose up -d

            # Ê∏ÖÁêÜÊó†Áî®ÈïúÂÉè
            docker image prune -f